## 例题 1 set 用法

```py
s2 = {1, 2, 3, 4, 5}
print(s2) # {1, 2, 3, 4, 5}
s3 = set([6, 7, 8, 9, 10])
print(s3) # {6, 7, 8, 9, 10}
s4 = {1, 2, 3, 3, 4, 5}
print(s4) # {1, 2, 3, 4, 5}

s1 = {1, 2, 3}
print(len(s1)) # 3

s1 = {1, 2, 3}
s1.add(4)
print(s1) # {1, 2, 3, 4}

s1 = {1, 2, 3, 4}
s1.remove(4)
print(s1) # {1, 2, 3}

s1 = {1, 2, 3}
s1.discard(5)
print(s1) # {1, 2, 3}

s1 = {1, 2, 3}
s1.clear()
print(s1) # {}

s2 = {3, 4, 5}
s3 = s1.union(s2)
print(s3) # {1, 2, 3, 4, 5}

s1 = {1, 2, 3}
s2 = {3, 4, 5}
s3 = s1.intersection(s2)
print(s3) # {3}

s1 = {1, 2, 3}
s2 = {3, 4, 5}
s3 = s1.difference(s2)
print(s3) # {1, 2}
```

## 例题 2

木材仓库 https://www.luogu.com.cn/problem/P5250

用 set 实现 add 和 lower_bound 操作

```py
n = int(input())
operations_set = set()  # Using a set to store unique integers

for i in range(1, n + 1):
    operation, value = map(int, input().split())
    if operation == 1:
        if value in operations_set:
            print("Already Exist")
        else:
            operations_set.add(value)
    else:
        if not operations_set:
            print("Empty")
            continue
        if value in operations_set:
            print(value)
            operations_set.remove(value)
        else:
            lower_bound = sorted(operations_set)
            l2 = [x for x in lower_bound if x < value]
            l3 = [x for x in lower_bound if x > value]
            if not l2:
                print(lower_bound[0])
                operations_set.remove(lower_bound[0])
            elif not l3:
                print(lower_bound[-1])
                operations_set.remove(lower_bound[-1])
            else:
                if abs(lower_bound[0] - value) < abs(lower_bound[-1] - value):
                    print(lower_bound[0])
                    operations_set.remove(lower_bound[0])
                else:
                    print(lower_bound[-1])
                    operations_set.remove(lower_bound[-1])
```

## 例题 3 / 作业

给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。

```
示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]
示例 2：

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]
解释：[4,9] 也是可通过的
```

法一：

我们可以，两个集合当中的内容都放进 两个 set 当中，第一个是 去重，第二是排序，好查找。然后，去两个set 一个一个遍历比较，有相同的就是交集。

法二：

还有比 法一 更好的方法，开始也都把两个集合放到 两个 set 当中。然后中序遍历保存结果，比如是下面两个结果：
