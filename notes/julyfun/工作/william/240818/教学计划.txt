## 例题 1 set 用法

```python
s2 = {1, 2, 3, 4, 5}
print(s2) # {1, 2, 3, 4, 5}
s3 = set([6, 7, 8, 9, 10])
print(s3) # {6, 7, 8, 9, 10}
s4 = {1, 2, 3, 3, 4, 5}
print(s4) # {1, 2, 3, 4, 5}

s1 = {1, 2, 3}
print(len(s1)) # 3

s1 = {1, 2, 3}
s1.add(4)
print(s1) # {1, 2, 3, 4}

s1 = {1, 2, 3, 4}
s1.remove(4)
print(s1) # {1, 2, 3}

s1 = {1, 2, 3}
s1.discard(5)
print(s1) # {1, 2, 3}

s1 = {1, 2, 3}
s1.clear()
print(s1) # {}

s2 = {3, 4, 5}
s3 = s1.union(s2)
print(s3) # {1, 2, 3, 4, 5}

s1 = {1, 2, 3}
s2 = {3, 4, 5}
s3 = s1.intersection(s2)
print(s3) # {3}

s1 = {1, 2, 3}
s2 = {3, 4, 5}
s3 = s1.difference(s2)
print(s3) # {1, 2}
```

## 例题 1

https://www.luogu.com.cn/problem/P1059

使用 set 实现去重和排序

```python
s = sorted(list(set))
```

## 例题 2：真题

https://usaco.org/index.php?page=viewproblem2&cpid=1111

使用 set 不重复地存储每个祖先年份所在的段，找出最大的 k - 1 的间隔从答案中减去。

## 作业例题

木材仓库 https://www.luogu.com.cn/problem/P5250

用 set 实现 add 和 lower_bound 操作

```python
n = int(input())
operations_set = set()  # Using a set to store unique integers

for i in range(1, n + 1):
    operation, value = map(int, input().split())
    if operation == 1:
        if value in operations_set:
            print("Already Exist")
        else:
            operations_set.add(value)
    else:
        if not operations_set:
            print("Empty")
            continue
        if value in operations_set:
            print(value)
            operations_set.remove(value)
        else:
            lower_bound = sorted(operations_set)
            l2 = [x for x in lower_bound if x < value]
            l3 = [x for x in lower_bound if x > value]
            if not l2:
                print(lower_bound[0])
                operations_set.remove(lower_bound[0])
            elif not l3:
                print(lower_bound[-1])
                operations_set.remove(lower_bound[-1])
            else:
                if abs(lower_bound[0] - value) < abs(lower_bound[-1] - value):
                    print(lower_bound[0])
                    operations_set.remove(lower_bound[0])
                else:
                    print(lower_bound[-1])
                    operations_set.remove(lower_bound[-1])
```
